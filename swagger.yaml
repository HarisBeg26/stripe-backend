openapi: 3.0.0
info:
  title: Company & User Service API
  description: |
    API for managing companies, users, Stripe Connect onboarding, and payment transactions.
    This service relies on an API Gateway for authentication, which should pass user and company information via headers.
  version: 1.1.0
servers:
  - url: http://localhost:3000/api
    description: Local Development Server

tags:
  - name: Companies
    description: Operations related to company profiles and Stripe Connect onboarding.
  - name: Users
    description: Operations related to user management and payment history.
  - name: Payments
    description: Operations related to Stripe payment intents and transaction history.
  - name: Webhooks
    description: Endpoints for receiving Stripe webhook events.

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Creates a new user associated with a specific company.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  companyId:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  /users/payment-history:
    get:
      tags:
        - Users
      summary: Retrieve a user's payment history
      description: Fetches all payment transactions for the authenticated user, identified by the `X-User-ID` header.
      security:
        - gatewayAuth: []
      responses:
        '200':
          description: A list of the user's payment transactions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentTransaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: No payment history found for this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No payment history found for this user."

  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      description: Fetches a single user's details by their unique ID.
      security:
        - gatewayAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the user.
      responses:
        '200':
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /companies:
    get:
      tags:
        - Companies
      summary: Retrieve a list of all companies
      description: Fetches all registered companies. Requires admin role.
      security:
        - gatewayAuth: [admin]
      responses:
        '200':
          description: A list of companies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Companies
      summary: Create a new company
      description: Registers a new company. Requires admin role.
      security:
        - gatewayAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompany'
      responses:
        '201':
          description: Company created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'

  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Retrieve a company by ID
      description: Fetches a single company's details. User must belong to the company or be an admin.
      security:
        - gatewayAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the company.
      responses:
        '200':
          description: Company details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Companies
      summary: Update an existing company
      description: Updates a company's details. User must be an admin of that company.
      security:
        - gatewayAuth: [admin]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the company.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCompany'
      responses:
        '200':
          description: Company updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Companies
      summary: Delete a company
      description: Deletes a company. Requires admin role.
      security:
        - gatewayAuth: [admin]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the company.
      responses:
        '204':
          description: Company deleted successfully.
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /companies/{id}/stripe-onboard:
    post:
      tags:
        - Companies
      summary: Initiate Stripe Connect onboarding for a company
      description: Generates a Stripe Connect account link for the company to complete onboarding. User must be an admin of the company.
      security:
        - gatewayAuth: [admin]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Unique identifier of the company to onboard.
      responses:
        '200':
          description: URL for Stripe Connect onboarding.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /stripe/create-subscription-checkout:
    post:
      tags:
        - Payments
      summary: Create a Stripe Subscription Checkout Session
      description: Creates a Stripe Checkout session for a new subscription. User must belong to the company.
      security:
        - gatewayAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - companyId
                - priceId
              properties:
                companyId:
                  type: string
                  format: uuid
                priceId:
                  type: string
      responses:
        '200':
          description: Stripe Checkout session URL.
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /stripe/subscriptions/{subscriptionId}:
    delete:
      tags:
        - Payments
      summary: Cancel a Stripe Subscription
      description: Permanently cancels a customer's subscription. This action cannot be undone.
      security:
        - gatewayAuth: []
      parameters:
        - in: path
          name: subscriptionId
          schema:
            type: string
          required: true
          description: The unique identifier of the Stripe subscription to be canceled.
      responses:
        '200':
          description: Subscription canceled successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription canceled successfully."
                  subscription:
                    $ref: '#/components/schemas/StripeSubscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /stripe/payment-history:
    get:
      tags:
        - Payments
      summary: Retrieve payment history for a company
      description: Fetches payment transactions for the company identified in the `X-Company-ID` header.
      security:
        - gatewayAuth: []
      responses:
        '200':
          description: A list of payment transactions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentTransaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /stripe-webhook:
    post:
      tags:
        - Webhooks
      summary: Receive Stripe webhook events
      description: This endpoint receives real-time event notifications from Stripe to update payment statuses.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Stripe event object.
      responses:
        '200':
          description: Webhook received successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
                    example: true
        '400':
          description: Webhook signature verification failed.

components:
  responses:
    BadRequest:
      description: Invalid request payload or parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Invalid input provided."
    Unauthorized:
      description: Authentication information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Authentication required. Please provide valid headers."
    Forbidden:
      description: The authenticated user does not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "You do not have permission to access this resource."
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Resource not found."
    Conflict:
      description: The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "A resource with this identifier already exists."

  securitySchemes:
    gatewayAuth:
      type: apiKey
      in: header
      name: X-User-ID # This is a placeholder; multiple headers are used.
      description: |
        Authentication is handled by the API Gateway, which must pass the following headers:
        - `X-User-ID`: The UUID of the authenticated user.
        - `X-Company-ID`: The UUID of the user's company.
        - `X-User-Role`: The role of the user (e.g., `admin`, `user`).

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        companyId:
          type: string
          format: uuid
        role:
          type: string
          enum: [admin, user]

    NewUser:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - companyId
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phone:
          type: string
        companyId:
          type: string
          format: uuid

    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        phone:
          type: string
        stripeAccountId:
          type: string

    NewCompany:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        phone:
          type: string

    PaymentTransaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyId:
          type: string
          format: uuid
        customer:
          type: string
        amount:
          type: integer
        currency:
          type: string
        stripePaymentIntentId:
          type: string
        status:
          type: string
          enum: ['pending', 'succeeded', 'failed', 'canceled', 'refunded']
          description: The status of the payment from Stripe's perspective.
          example: "succeeded"
        internalStatus:
          type: string
          enum: ['awaiting_approval', 'approved', 'declined', 'fulfilled', 'canceled_by_business']
          description: The internal business approval status of the transaction.
          example: "awaiting_approval"
        description:
          type: string
          nullable: true
          description: A brief description of the transaction.
          example: "Reservation for spa package"
        metadata:
          type: object
          nullable: true
          description: Additional custom data related to the transaction.
          example:
            reservationId: "res_xyz_789"
            customerId: "customer_abc_456"
            internalNotes: "Customer reservation confirmed for 2 PM slot."
        createdAt:
          type: string
          format: date-time
          description: The date and time when the transaction record was created.
          readOnly: true
          example: "2025-07-23T13:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the transaction record was last updated.
          readOnly: true
          example: "2025-07-23T13:00:00.000Z"

    StripeSubscription:
      type: object
      description: Represents a Stripe subscription object.
      properties:
        id:
          type: string
          example: "sub_1J2j3k4l5m6n7o8p"
        status:
          type: string
          example: "canceled"
        current_period_end:
          type: integer
          format: int64
          description: The end of the current billing period, as a Unix timestamp.

    Error:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
          example: "Company not found"
        error:
          type: string
          nullable: true
          description: Optional detailed error information (e.g., stack trace or specific database error).
          example: "SequelizeUniqueConstraintError: Validation error"